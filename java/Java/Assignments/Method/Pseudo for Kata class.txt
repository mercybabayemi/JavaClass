Pseudo for Kata class

Pseudocode for isEven(integer) expecting a boolean return type

- declare a value returning method that takes an int integer arguement
- if integer divided by 2 is remainder 0, return true
- if integer divided by 2 is not remainder 0, return false

Pseudocode for isPrimeNumber(integer) expecting a boolean return type
- initialize count to 3
- if integer is less than  to two, return false
- if integer is equal 2, return true
- if integer % 2 is equal no remainder, return false.
- else while count <= integer, increment count 
- if integer % count == 0 , return false and increment count.
- return true if all passes outside loop.

pseudocode for subtract(integer,integer) expecting a integer return type
- initialize subtraction to 0
- if integer 1 is greater then integer 2, subtraction is equal integer 1 - 2
- if integer 2 is greater than integer 1, subtraction is equal integer 2 - 1
- return subtraction

pseudocode for divide(integer,integer) expecting a float return type
- initialize division  to 0
- if integer2 is equal to 0 or integer1 is equal to 0, print "error: 0"
- else assign float result variable to integer1/integer2
- print result

pseudocode for factorOf(integer) expecting an integer return type
- initialize number 0 to int count
- iterate over count from item 1, if integer % item is equal to 0, increment count
- create a new array object with the size of count
- collect and save as factor
- initialize number 0 to int index
- iterate over index from item 1, if integer % item is equal to 0, factor at index is equal item
- increment index
- return factor outside loop

pseudocode for isSquare(integer) expecting a boolean return type
- calculate the casted to integer value of Math.sqrt of number
- collect and store result to sqrtt
- return true if sqrtt times sqrtt = number

pseudocode for isPalindrome(integer) expecting a boolean return type
- initialize reversed variable to 0
- initialize original variable to integer
- loop until integer becomes 0, so while integer is not equal to 0
- in each iteration, extract last number by calculate integer % 10 
- collect and save it as int digit
- append the extracted digit to reversed by multiplying reversed by 10 and adding the digit
- remove the last number from integer by doing integer division by 10 
- after the loop, compare original to reversed, if they are true, number is a palindrome

pseudocode for factorialOf(integer) expecting a long return type
- initialize result to 1
- iterate over number from index 1 to integer
- multiply result by index 
- return result after loop

pseudocode for squareOf(integer) expecting a long return type 
- calculate the square of number by multiplying number by itself
- collect and store result to result
- return result