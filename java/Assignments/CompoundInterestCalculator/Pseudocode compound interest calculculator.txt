Pseudocode compound interest calculator:
- Declare a class CompoundInterestCalculator
- In main method, import scanner from java.util package
- Create a scanner object 
- Collect and save object as input

- Declare a method to getInitialInvestment receiving scanner input and returning initialInvestment
- Prompt user to "Enter the amount of money that you have available to invest initially: "
- Collect and save it as initialInvestment

- Declare a method to getMonthlyContribution receiving scanner input and returning monthlyContribution
- Prompt user to "Enter amount that you plan to add to the principal every month or a negative number for the amount that you plan to withdraw every month: "
- Collect and save it as monthlyContribution 

- Declare a method to getLengthOfTimeInYears receiving scanner input and returning lengthOfTimeInYears
- Prompt user to "Enter length of time in years that you plan to save: "
- Collect and save as lengthOfTimeInYears

- Declare a method to getEstimatedAnnualInterestRate receiving scanner input and returning estimatedAnnualInterestRate
- Prompt user to "Enter your estimated annual interest rate: "
- Collect and save as estimatedAnnualInterestRate

- Declare a method to getInterestRateVarianceRange receiving scanner input and returning interestRateVarianceRange
- Prompt user to "Enter range of interest rates(above and below the rates set above) that you desire to see results for: "
- Collect and save as interestRateVarianceRange


- Declare a method to getCompoundFrequency receiving scanner input and returning compoundFrequency
- Prompt user to "Enter times per year that interest will be compounded: \n1. Annually \n2. Semiannually \n3. Quarterly \n4. Monthly \n5. Daily"
- Collect and save it as compoundFrequencyResponse
- Switch between response and return valid input

- Calculate total number of periods with : 
	totalPeriods = lengthOfTimeInYears * compoundFrequency

- Declare a method to stimulate monthly compounding and contributions receiving parameter initialInvestment, totalPeriods, estimatedAnnualInterestRate, compoundFrequency, monthlyContribution and returning balance
- Name method getCompoundedInterestBalance
- initialize balance to initialInvestment
- For each months ranging from 0 to totalPeriods, first calculate the monthly interest rate with:
	monthlyInterestRate = estimatedAnnualInterestRate / compoundFrequency
- Then apply it to the current balance with: 
	balance += balance * monthlyInterestRate
- After applying interest, if the monthlyContribution is greater than 0, add monthlyContribution to the balance:
	balance += monthlyContribution
- Else deduct monthlyContribution to the balance:
	balance -= monthlyContribution

- Declare a method to stimulate negative monthly compounding and contributions receiving parameter initialInvestment, totalPeriods, interestRateVarianceRange, estimatedAnnualInterestRate, compoundFrequency, monthlyContribution and returning balance
- Name method getDeductedCompoundedInterestBalance
- initialize balance to initialInvestment
- For each months ranging from 0 to totalPeriods, first calculate the monthly interest rate with:
	newRate = estimatedAnnualInterestRate - interestRateVarianceRange
	monthlyInterestRate = newRate / compoundFrequency
- Then apply it to the current balance with: 
	balance += balance * monthlyInterestRate
- After applying interest, if the monthly contribution is greater than 0, add monthlyContribution to the balance:
	balance += monthlyContribution
- Else deduct monthlyContribution to the balance:
	balance -= monthlyContribution


- Declare a method to stimulate positive monthly compounding and contributions receiving parameter initialInvestment, totalPeriods, interestRateVarianceRange, estimatedAnnualInterestRate, compoundFrequency, monthlyContribution and returning balance
- Name method getAddedCompoundedInterestBalance
- initialize balance to initialInvestment
- For each months ranging from 0 to totalPeriods, first calculate the monthly interest rate with:
	newRate = estimatedAnnualInterestRate + interestRateVarianceRange
	monthlyInterestRate = newRate / compoundFrequency
- Then apply it to the current balance with: 
	balance += balance * monthlyInterestRate
- After applying interest, if the monthly contribution is greater than 0, add monthlyContribution to the balance:
	balance += monthlyContribution
- Else deduct monthlyContribution to the balance:
	balance -= monthlyContribution

- Invoke getCompoundedInterestBalance passing in the  arguements directly and display result
- Invoke getDeductedCompoundedInterestBalance passing in the  arguements directly and display result
- Invoke getAddedCompoundedInterestBalance passing in the  arguements directly and display result